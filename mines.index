<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Mines Predictor</title>
    <style>
        * { box-sizing: border-box; }
        html,body { margin:0; padding:0; height:100%; background:#0d1117; color:#fff; font-family:"Segoe UI", Tahoma, Arial; display:flex; justify-content:center; align-items:center; }
        .card { background:#1f2937; border-radius:12px; padding:22px; box-shadow: 0 10px 30px rgba(0,0,0,0.6); text-align:center; max-width:480px; width:90%; }
        h1 { color:#facc15; margin:0 0 20px; font-size:26px; }
        .how-to-btn { background: #facc15; color: #000; border: none; border-radius: 8px; padding: 10px 20px; font-weight: bold; cursor: pointer; margin-bottom: 20px; }
        .controls { display:flex; justify-content:center; gap:20px; margin-bottom: 20px; }
        .input-group { text-align: left; }
        .input-group label { display: block; margin-bottom: 5px; color: #aaa; font-size: 14px; }
        .dropdown { position: relative; display: inline-block; width: 150px; }
        .dropdown-btn { background: #2d3748; color: #fff; padding: 10px; border-radius: 8px; border: none; width: 100%; cursor: pointer; text-align: center; }
        .dropdown-content { display: none; position: absolute; background-color: #2d3748; min-width: 150px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); z-index: 1; border-radius: 8px; margin-top: 5px; left: 0; }
        .dropdown-content a { color: white; padding: 12px 16px; text-decoration: none; display: block; text-align: center; }
        .dropdown-content a:hover { background-color: #4a5568; }
        .dropdown-content a.selected { background-color: #facc15; color: #000; font-weight: bold; }
        .action-buttons { display: flex; justify-content: center; gap: 15px; margin-top: 20px; }
        .btn { padding: 15px 30px; border: none; border-radius: 8px; font-weight: bold; cursor: pointer; font-size: 16px; }
        .btn.yellow { background: #facc15; color: #000; }
        .btn.grey { background: #4a5568; color: #999; }
        .bet-amount { font-size: 24px; font-weight: bold; color: #00ff99; margin-top: 20px; min-height: 30px; }
        .grid-container { display: grid; grid-template-columns: repeat(5, 1fr); gap: 10px; margin-top: 20px; }
        .grid-item { background: #4a5568; border-radius: 8px; height: 60px; display: flex; justify-content: center; align-items: center; }
        .grid-item img { width: 40px; }
        .meta { margin-top:14px; color:#ffd86b; font-weight:700; min-height:22px; }
    </style>
</head>
<body>
    <div class="card">
        <h1>AI Mines Predictor</h1>
        <button class="how-to-btn">HOW TO USE BOT</button>

        <div class="controls">
            <div class="input-group">
                <label>Grid Size</label>
                <div class="dropdown">
                    <button class="dropdown-btn" id="gridBtn">5x5</button>
                    <div class="dropdown-content" id="gridDropdown">
                        <a href="#" data-value="3x3">3x3</a>
                        <a href="#" data-value="4x4">4x4</a>
                        <a href="#" data-value="5x5" class="selected">5x5</a>
                        <a href="#" data-value="6x6">6x6</a>
                        <a href="#" data-value="7x7">7x7</a>
                    </div>
                </div>
            </div>
            <div class="input-group">
                <label>Number of Mines</label>
                <div class="dropdown">
                    <button class="dropdown-btn" id="minesBtn">3 Mines</button>
                    <div class="dropdown-content" id="minesDropdown">
                        <a href="#" data-value="1">1 Mine</a>
                        <a href="#" data-value="2">2 Mines</a>
                        <a href="#" data-value="3" class="selected">3 Mines</a>
                        <a href="#" data-value="4">4 Mines</a>
                        <a href="#" data-value="5">5 Mines</a>
                        <a href="#" data-value="6">6 Mines</a>
                        <a href="#" data-value="7">7 Mines</a>
                        <a href="#" data-value="10">10 Mines</a>
                        <a href="#" data-value="15">15 Mines</a>
                    </div>
                </div>
            </div>
        </div>

        <div class="bet-amount" id="betAmountText"></div>
        <div id="minesGrid" class="grid-container" style="display: none;"></div>

        <div class="action-buttons">
            <button class="btn yellow" id="betBtn">Get bet amount</button>
            <button class="btn grey" id="signalBtn">Get Signal</button>
        </div>
        <div id="meta" class="meta"></div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const gridBtn = document.getElementById('gridBtn');
            const minesBtn = document.getElementById('minesBtn');
            const gridDropdown = document.getElementById('gridDropdown');
            const minesDropdown = document.getElementById('minesDropdown');
            const betBtn = document.getElementById('betBtn');
            const signalBtn = document.getElementById('signalBtn');
            const betAmountText = document.getElementById('betAmountText');
            const minesGrid = document.getElementById('minesGrid');
            const meta = document.getElementById('meta');

            // Show user ID if passed in URL
            const params = new URLSearchParams(location.search);
            const user = params.get('user');
            if (user) {
                meta.textContent = 'Your ID: ' + decodeURIComponent(user);
                console.log('Mines opened with user=', user);
            } else {
                meta.textContent = '';
            }

            function closeAllDropdowns() {
                gridDropdown.style.display = 'none';
                minesDropdown.style.display = 'none';
            }

            gridBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                closeAllDropdowns();
                gridDropdown.style.display = 'block';
            });
            minesBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                closeAllDropdowns();
                minesDropdown.style.display = 'block';
            });

            document.addEventListener('click', (e) => {
                if (!e.target.closest('.dropdown')) {
                    closeAllDropdowns();
                }
            });

            gridDropdown.querySelectorAll('a').forEach(item => {
                item.addEventListener('click', (e) => {
                    e.preventDefault();
                    gridBtn.textContent = e.target.dataset.value;
                    closeAllDropdowns();
                });
            });

            minesDropdown.querySelectorAll('a').forEach(item => {
                item.addEventListener('click', (e) => {
                    e.preventDefault();
                    minesBtn.textContent = e.target.textContent;
                    closeAllDropdowns();
                });
            });

            betBtn.addEventListener('click', () => {
                const amount = Math.floor(Math.random() * (3000 - 1000 + 1)) + 1000;
                betAmountText.textContent = `Your bet amount: ${amount} NGN`;
                minesGrid.style.display = 'none';
            });

            signalBtn.addEventListener('click', () => {
                const gridSizeStr = gridBtn.textContent.split('x')[0];
                const numMinesStr = minesBtn.textContent.split(' ')[0];

                const gridSize = parseInt(gridSizeStr);
                const numMines = parseInt(numMinesStr);
                const totalCells = gridSize * gridSize;
                
                if (numMines > totalCells) {
                    betAmountText.textContent = 'Error: More mines than cells';
                    return;
                }

                minesGrid.innerHTML = '';
                minesGrid.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;

                const allIndices = Array.from({ length: totalCells }, (_, i) => i);
                const minesIndices = [];
                while (minesIndices.length < numMines) {
                    const randomIndex = Math.floor(Math.random() * allIndices.length);
                    if (!minesIndices.includes(allIndices[randomIndex])) {
                        minesIndices.push(allIndices[randomIndex]);
                    }
                }

                for (let i = 0; i < totalCells; i++) {
                    const cell = document.createElement('div');
                    cell.classList.add('grid-item');
                    const img = document.createElement('img');
                    img.src = minesIndices.includes(i) ? 'https://cdn-icons-png.flaticon.com/512/3673/3673516.png' : 'https://cdn-icons-png.flaticon.com/512/3529/3529562.png';
                    img.alt = minesIndices.includes(i) ? 'mine' : 'diamond';
                    cell.appendChild(img);
                    minesGrid.appendChild(cell);
                }

                betAmountText.textContent = '';
                minesGrid.style.display = 'grid';
            });
        });
    </script>
</body>
</html>
