<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>AI Mines Predictor</title>
  <style>
    * { box-sizing: border-box; }
    html, body { margin: 0; padding: 0; height: 100%; background: #0d1117; color: #fff; font-family: "Segoe UI", Tahoma, Arial; }
    .wrap { max-width: 820px; margin: 30px auto; padding: 20px; }

    .card { background: #101216; border-radius: 12px; padding: 22px; box-shadow: 0 10px 30px rgba(0,0,0,0.6); text-align: center; }
    h1 { color: #facc15; margin: 0 0 8px; font-size: 26px; }
    p.sub { color: #bfc7c5; margin: 8px 0 18px; }

    /* стили для выбора сетки и количества мин */
    select, .ybtn { background: #facc15; color: #000; font-size: 18px; padding: 10px; border-radius: 10px; border: none; cursor: pointer; transition: transform 0.16s ease, box-shadow 0.16s ease; }
    select { width: 100%; max-width: 200px; margin: 10px 0; }
    .ybtn:hover { transform: translateY(-6px); box-shadow: 0 12px 30px rgba(0, 0, 0, 0.45); }
    
    .signal { margin-top: 26px; font-size: 48px; font-weight: 900; color: #00ff99; padding: 18px 24px; border-radius: 12px; background: linear-gradient(180deg, rgba(10,30,20,0.12), rgba(10,30,20,0.06)); display: inline-block; min-width: 320px; text-align: center; transform: scale(1); transition: transform 0.36s cubic-bezier(.2,.9,.22,1), box-shadow 0.36s ease; }
    .signal.pop { transform: scale(1.22); box-shadow: 0 20px 60px rgba(0,255,153,0.14), 0 0 40px rgba(0,255,153,0.12); text-shadow: 0 0 12px rgba(0,255,153,0.35); }

    .meta { margin-top: 14px; color: #ffd86b; font-weight: 700; min-height: 22px; }

    /* плавный fade для появления */
    .fade { opacity: 0; transform: translateY(8px); transition: opacity .36s ease, transform .36s ease; }
    .fade.show { opacity: 1; transform: translateY(0); }

    @media (min-width: 720px) {
      .controls { display: flex; flex-direction: row; gap: 16px; }
      select { max-width: 200px; }
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1>AI Mines Predictor</h1>
      <p class="sub">Select grid size and number of mines, then get the bet amount or AI signal.</p>

      <!-- Grid Size Selector -->
      <label for="gridSize">Grid Size</label>
      <select id="gridSize">
        <option value="3x3">3x3</option>
        <option value="4x4">4x4</option>
        <option value="5x5" selected>5x5</option>
        <option value="6x6">6x6</option>
        <option value="7x7">7x7</option>
      </select>

      <!-- Number of Mines Selector -->
      <label for="numMines">Number of Mines</label>
      <select id="numMines">
        <option value="1">1 Mine</option>
        <option value="2">2 Mines</option>
        <option value="3" selected>3 Mines</option>
        <option value="4">4 Mines</option>
        <option value="5">5 Mines</option>
        <option value="6">6 Mines</option>
        <option value="7">7 Mines</option>
        <option value="10">10 Mines</option>
        <option value="15">15 Mines</option>
      </select>

      <!-- Buttons -->
      <div class="controls">
        <button id="btnBet" class="ybtn">Get bet amount</button>
        <button id="btnSignal" class="ybtn">Get Signal</button>
      </div>

      <!-- Signal display -->
      <div id="signal" class="signal">GET YOUR SIGNAL</div>

      <!-- Bet Amount -->
      <div id="meta" class="meta"></div>
    </div>
  </div>

  <script>
    const btnBet = document.getElementById('btnBet');
    const btnSignal = document.getElementById('btnSignal');
    const signalEl = document.getElementById('signal');
    const meta = document.getElementById('meta');
    const gridSizeSelector = document.getElementById('gridSize');
    const numMinesSelector = document.getElementById('numMines');

    // показать user id, если передан в URL
    const params = new URLSearchParams(location.search);
    const user = params.get('user');
    if (user) {
      meta.textContent = 'Votre ID: ' + decodeURIComponent(user);
    }

    function animateSignalOnce(text) {
      signalEl.textContent = text;
      signalEl.classList.remove('pop');
      void signalEl.offsetWidth; // force reflow
      signalEl.classList.add('pop');
      setTimeout(() => signalEl.classList.remove('pop'), 700);
    }

    btnBet.addEventListener('click', () => {
      const min = 1200, max = 3000;
      const amount = Math.floor(Math.random() * (max - min + 1)) + min;
      animateSignalOnce(amount + ' NGN');
      meta.textContent = 'Your bet amount: ' + amount + ' NGN';
      meta.classList.add('fade');
      setTimeout(() => meta.classList.add('show'), 40);
      setTimeout(() => { meta.classList.remove('show'); }, 1400);
    });

    btnSignal.addEventListener('click', () => {
      let mult = Math.random() * (4 - 1.2) + 1.2;
      mult = Math.round(mult * 100) / 100;
      const text = mult.toFixed(2) + 'x';
      animateSignalOnce(text);
      meta.textContent = 'AI Signal: ' + text;
      meta.classList.add('fade');
      setTimeout(() => meta.classList.add('show'), 40);
      setTimeout(() => { meta.classList.remove('show'); }, 1400);
    });
  </script>
</body>
</html>
